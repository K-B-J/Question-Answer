# Generated by Django 4.0.3 on 2022-04-24 09:08


from django.db import migrations
import random
import datetime


def load_data(apps, schema_editor):
    # Creating dummy user
    User = apps.get_model("auth", "User")
    dummy_user = User(username="dummy", password="s4tuWRwKT248j@")
    dummy_user.save()

    UserInfo = apps.get_model("main", "UserInfo")
    dummy = UserInfo(
        user=dummy_user,
        first_name="dummy",
        last_name="user",
        gender="Male",
        email="abc@abc.com",
        mobile_no="0000000000",
        dob=datetime.date(2000, 12, 12),
    )
    dummy.save()

    # Creating 8 questions
    Question = apps.get_model("main", "Question")
    q1 = Question(user=dummy, question="How is a bubble sort algorithm implemented?")
    q1.save()
    q2 = Question(
        user=dummy,
        question="How to print the first non-repeated character from a string?",
    )
    q2.save()
    q3 = Question(
        user=dummy,
        question="How to find the first non repeated character of a given String?",
    )
    q3.save()
    q4 = Question(
        user=dummy,
        question="How do you find duplicate numbers in an array if it contains multiple duplicates?",
    )
    q4.save()
    q5 = Question(
        user=dummy, question="How do you remove duplicates from an array in place?"
    )
    q5.save()
    q6 = Question(
        user=dummy,
        question="How are duplicates removed from an array without using any library?",
    )
    q6.save()
    q7 = Question(
        user=dummy,
        question="How do you find the middle element of a singly linked list in one pass?",
    )
    q7.save()
    q8 = Question(
        user=dummy,
        question="How do you check if a given linked list contains a cycle? How will you find initial node of the cycle?",
    )
    q8.save()

    # Answering 3 questions
    Answer = apps.get_model("main", "Answer")
    a1 = Answer(
        user=dummy,
        question=q1,
        answer="Refer to the following website https://www.studytonight.com/data-structures/bubble-sort",
    )
    a1.save()
    a2 = Answer(
        user=dummy,
        question=q1,
        answer="You can also refer to the following youtube video https://www.youtube.com/watch?v=o4bAoo_gFBU",
    )
    a2.save()
    a3 = Answer(
        user=dummy,
        question=q3,
        answer="There are few different methods to find the same you can checkout the methods given here https://www.geeksforgeeks.org/given-a-string-find-its-first-non-repeating-character/",
    )
    a3.save()
    a4 = Answer(
        user=dummy,
        question=q5,
        answer="You can refer to the solution given by gfg here https://www.geeksforgeeks.org/remove-duplicates-sorted-array/",
    )
    a4.save()
    a5 = Answer(
        user=dummy,
        question=q5,
        answer="You can refer to the solution given by interviewbit here https://www.interviewbit.com/blog/remove-duplicates-from-array/",
    )
    a5.save()
    a6 = Answer(
        user=dummy,
        question=q5,
        answer="You can refer to the solution given by javapoint here https://www.javatpoint.com/java-program-to-remove-duplicate-element-in-an-array",
    )
    a6.save()

    # upvoting random 4 answers
    AnswerUpvote = apps.get_model("main", "AnswerUpvote")
    list_answers = [a1, a2, a3, a4, a5, a6]
    for i in range(60):
        AnswerUpvote(user=dummy, answer=random.sample(list_answers, k=1)[0]).save()


def delete_data(apps, schema_editor):
    AnswerUpvote = apps.get_model("main", "AnswerUpvote")
    AnswerUpvote.objects.all().delete()

    Answer = apps.get_model("main", "Answer")
    Answer.objects.all().delete()

    Question = apps.get_model("main", "Question")
    Question.objects.all().delete()

    UserInfo = apps.get_model("main", "UserInfo")
    UserInfo.objects.all().delete()

    User = apps.get_model("auth", "User")
    User.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("main", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(load_data, delete_data),
    ]
